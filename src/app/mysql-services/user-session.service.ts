import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { isPlatformBrowser } from '@angular/common';
import { Inject, PLATFORM_ID } from '@angular/core';


@Injectable({
  providedIn: 'root'
})
export class UserSessionService {

  private apiUrl = 'http://localhost:5000/api';

  constructor(private http: HttpClient,@Inject(PLATFORM_ID) private platformId: Object) { }

  //–¢–æ–≤–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–∞, —á–µ localStorage —â–µ —Å–µ –∏–∑–ø—ä–ª–Ω–∏ —Å–∞–º–æ –≤ –±—Ä–∞—É–∑—ä—Ä.
  getUserData(): string | null {
    if (isPlatformBrowser(this.platformId)) {
      return localStorage.getItem('loggedUser');
    }
    return null;
  }

  private get authHeader() {
    const token = localStorage.getItem('token'); // üîπ –í–∑–∏–º–∞ —Ç–æ–∫–µ–Ω–∞ –æ—Ç localStorage
    return {
      Authorization: `Bearer ${token}`
    };
  }
  // –æ—Ç —Å—Ç–∞—Ä–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    private loggedInUser = new BehaviorSubject<string | null>(localStorage.getItem('loggedUser'));
    currentUser$ = this.loggedInUser.asObservable();
  
    setUser(userData: string): void {
      localStorage.setItem('loggedUser', userData);
      this.loggedInUser.next(userData); // –£–≤–µ–¥–æ–º—è–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    }
  
    clearUser(): void {
      localStorage.removeItem('loggedUser');
      this.loggedInUser.next(null); // –ù—É–ª–∏—Ä–∞–º–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
    }
    //----------------------------------

    deleteOwnAccount(userId: number): Observable<any> {
      console.log('üîç –ò–∑–ø—Ä–∞—â–∞–º ID –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ:', userId);
      return this.http.delete(`${this.apiUrl}/user/${userId}`, { headers: this.authHeader });
    }
}
