import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { isPlatformBrowser } from '@angular/common';
import { Inject, PLATFORM_ID } from '@angular/core';
import { tap } from 'rxjs';
import { AuthService } from './auth-service.service';
import { Router } from '@angular/router';


@Injectable({
  providedIn: 'root'
})
export class UserSessionService {

  private apiUrl = 'http://localhost:5000/api';

  constructor(
    private http: HttpClient,
    private authService: AuthService, 
    private router: Router,
    // @Inject(PLATFORM_ID) private platformId: any  //SSR 
  ) { }

  //–¢–æ–≤–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–∞, —á–µ localStorage —â–µ —Å–µ –∏–∑–ø—ä–ª–Ω–∏ —Å–∞–º–æ –≤ –±—Ä–∞—É–∑—ä—Ä.
  getUserData(): string | null {
      return localStorage.getItem('loggedUserMYSQL');
  }

  private get authHeader() {
    const token = localStorage.getItem('token'); // üîπ –í–∑–∏–º–∞ —Ç–æ–∫–µ–Ω–∞ –æ—Ç localStorage
    return {
      Authorization: `Bearer ${token}`
    };
  }
  // –æ—Ç —Å—Ç–∞—Ä–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    private loggedInUser = new BehaviorSubject<string | null>(localStorage.getItem('loggedUserMYSQL'));
    currentUser$ = this.loggedInUser.asObservable();

  // user-session.service.ts
  deleteOwnAccount(userId: number): Observable<any> {
    // console.log("üì¢ –û–ø–∏—Ç –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ user —Å ID:", userId);

    return this.http.delete(`${this.apiUrl}/user/${userId}`, { responseType: 'text' });
    // return this.http.delete(`${this.apiUrl}/user/${userId}`, { headers: this.authHeader }).pipe(
    //   tap(() => console.log("‚úÖ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –∏–∑—Ç—Ä–∏—Ç"))
    // );
  }

  // ‚¨áÔ∏è –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –ª–æ–∫–∞–ª–Ω–æ user-–∞
  clearUser(): void {
    console.log('üßπ –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∞—Ç–∞ —Å–µ—Å–∏—è');
    
    localStorage.removeItem('loggedUserMYSQL');
    this.loggedInUser.next(null); // –ù—É–ª–∏—Ä–∞–º–µ BehaviorSubject
  }
}
