import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject } from 'rxjs';
import { tap } from 'rxjs/operators';
import { Router } from '@angular/router';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  
  private apiUrl = 'http://localhost:5000/api/user';

  //public userLoggedIn = new BehaviorSubject<boolean>(!!localStorage.getItem('token'));
  public userLoggedIn = new BehaviorSubject<boolean>(false);
  userLoggedIn$ = this.userLoggedIn.asObservable();
  //userLoggedIn$ = new BehaviorSubject<boolean>(false);

  constructor(private http: HttpClient, private router:Router) {}

  ngOnInit() {
    const loggedUser = localStorage.getItem("loggedUser");
    this.userLoggedIn.next(!!loggedUser); // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ –ª–æ–≥–Ω–∞—Ç user
  }

  login(email: string, password: string) {
    return this.http.post<{ token: string; firstName: string; role: string; id: number }>(  // ‚ùóÔ∏è –ü–æ–ø—Ä–∞–≤–µ–Ω —Ç–∏–ø
      `${this.apiUrl}/login`, 
      { email, password }
    ).pipe(
      tap((response) => {
        localStorage.setItem('token', response.token);
        localStorage.setItem('loggedUser', JSON.stringify({
          userId: response.id,  // ‚úÖ response.id –≤–º–µ—Å—Ç–æ response.userId
          firstName: response.firstName,
          role: response.role
        }));
       // console.log("üîπ –ó–∞–ø–∏—Å–∞–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª:", response);
        this.userLoggedIn.next(true); // üî• –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ, —á–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –ª–æ–≥–Ω–∞—Ç
      })
    );
  }

  
  logout() {
    console.log('üö™ –ò–∑–ª–∏–∑–∞–Ω–µ...');
  
    // üîπ –ò–∑—á–∏—Å—Ç–≤–∞–º–µ LocalStorage
    localStorage.removeItem('token');
    localStorage.removeItem('loggedUser');
  
    // üîπ –ù—É–ª–∏—Ä–∞–º–µ BehaviorSubject (–∞–∫–æ –∏–º–∞ —Ç–∞–∫—ä–≤)
    this.userLoggedIn.next(false);
  
    // üîπ –ü—Ä–µ–Ω–∞—Å–æ—á–≤–∞–º–µ –∫—ä–º –ª–æ–≥–∏–Ω —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
    this.router.navigate(['/']);
  }

  //User info to use outside
  getUserInfo() {
    const userData = localStorage.getItem('loggedUser');
    return userData ? JSON.parse(userData) : null;
  }
}