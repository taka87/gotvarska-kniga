import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, from, Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import{supabase} from '../../../../supabase';

@Injectable({
  providedIn: 'root'
})
export class UserSessionServiceOnlineDB {

  private loggedInUser = new BehaviorSubject<any>(null); // ‚úÖ –î—ä—Ä–∂–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –ª–æ–≥–Ω–∞—Ç–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
  currentUser$ = this.loggedInUser.asObservable();

  constructor(
    private router: Router
  ) {
    this.checkUserSession(); // üî• –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ –ª–æ–≥–Ω–∞—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
  }

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å–∏—è –≤ Supabase
  async checkUserSession() {
    const { data } = await supabase.auth.getUser();
    if (data?.user) {
      this.loggedInUser.next(data.user);
    } else {
      this.loggedInUser.next(null);
    }
  }

  // ‚úÖ –í—Ä—ä—â–∞ —Ç–µ–∫—É—â–æ –ª–æ–≥–Ω–∞—Ç–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
  getUserData() {
    return this.loggedInUser.value;
  }

  // ‚úÖ –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –∞–∫–∞—É–Ω—Ç–∞ –æ—Ç Supabase
  deleteOwnAccount(userId: string): Observable<any> {
    // console.log("üì¢ –û–ø–∏—Ç –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ user —Å ID:", userId);

    return from(
      supabase.from('users').delete().eq('id', userId)
    ).pipe(
      tap(() => {
        console.log("‚úÖ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –∏–∑—Ç—Ä–∏—Ç –æ—Ç Supabase");
        this.clearUser(); // üöÄ –ß–∏—Å—Ç–∏–º —Å–µ—Å–∏—è—Ç–∞ —Å–ª–µ–¥ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ
      })
    );
  }

  // ‚úÖ –ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∞—Ç–∞ —Å–µ—Å–∏—è
  clearUser(): void {
    console.log('üßπ –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∞—Ç–∞ —Å–µ—Å–∏—è');
    this.loggedInUser.next(null);
    supabase.auth.signOut().then(() => {
      this.router.navigate(['/']);
    });
  }
}