import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject } from 'rxjs';
import { tap } from 'rxjs/operators';
import { Router } from '@angular/router';
import { environment } from '../../../environments/environment';
import { createClient } from '@supabase/supabase-js';
import { MatSnackBar } from '@angular/material/snack-bar';

@Injectable({
  providedIn: 'root'
})
export class AuthServiceOnlineDB {
  
  private supabase = createClient(environment.NEXT_PUBLIC_SUPABASE_URL, environment.NEXT_PUBLIC_SUPABASE_ANON_KEY);

  //public userLoggedIn = new BehaviorSubject<boolean>(!!localStorage.getItem('token'));
  public userLoggedInOnlineDB = new BehaviorSubject<any>(null);
  userLoggedIn$ = this.userLoggedInOnlineDB.asObservable();
  //userLoggedIn$ = new BehaviorSubject<boolean>(false);

  constructor(
    private router: Router,
    private snackBar: MatSnackBar
    ) {
      this.checkSessionOnlineDB(); // üî• –ò–∑–≤–∏–∫–≤–∞–º–µ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Å—ä—Ä–≤–∏—Å–∞!
    }

  showMessage(message: string) {
    this.snackBar.open(message, '–ó–∞—Ç–≤–æ—Ä–∏', {
      duration: 3000, // 3 —Å–µ–∫—É–Ω–¥–∏
      horizontalPosition: 'center',
      verticalPosition: 'top'
    });
  }

  // ngOnInit() {
      // –Ω–µ —Ä–∞–±–æ—Ç–∏ –≤ —Å—ä—Ä–≤–∏—Å–∏—Ç–µ!!!
  // }

  async login(email: string, password: string): Promise<any> {
    try {
      const { data, error } = await this.supabase.auth.signInWithPassword({ email, password });
  
      console.log("üõ†Ô∏è Supabase login response:", data, error); // üîπ Debugging
  
      if (error || !data.session) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥:", error?.message || "–ù—è–º–∞ —Å–µ—Å–∏—è!");
        this.showMessage("‚ùå Error login!");
        return null;
      }
  
      const userId = data.user?.id;
      const token = data.session.access_token;
  
      if (!userId) {
        console.error("‚ö†Ô∏è –õ–∏–ø—Å–≤–∞ userId! –í—ä–∑–º–æ–∂–Ω–æ –µ –≥—Ä–µ—à–∫–∞ –≤ Supabase.");
        return null;
      }
  
      // üîπ –í–∑–∏–º–∞–º–µ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è (—Ä–æ–ª—è + first_name, last_name)
      const { data: userData, error: userError } = await this.supabase
        .from("users") // üõë –ò–º–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ –≤ Supabase
        .select("role, first_name, last_name") // üëà –í–∑–∏–º–∞–º–µ –∏–º–µ–Ω–∞—Ç–∞
        .eq("id", userId)
        .single();
  
      if (userError) {
        console.error("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∑–µ–º–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏ –¥–∞–Ω–Ω–∏:", userError.message);
      }
  
      const userRole = userData?.role || "user"; // üëà –ê–∫–æ –Ω—è–º–∞ —Ä–æ–ª—è, –ø—Ä–∏–µ–º–∞–º–µ "user"
      const firstName = userData?.first_name || "";
      const lastName = userData?.last_name || "";
  
      // üîπ –ó–∞–ø–∞–∑–≤–∞–º–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏—Ç–µ –¥–∞–Ω–Ω–∏ –≤ localStorage
      localStorage.setItem("token", token);
      localStorage.setItem(
        "loggedUser",
        JSON.stringify({
          userId,
          email: data.user.email,
          first_name: firstName, // ‚úÖ –î–æ–±–∞–≤–µ–Ω–æ
          last_name: lastName,   // ‚úÖ –î–æ–±–∞–≤–µ–Ω–æ
          role: userRole
        })
      );
  
      this.userLoggedInOnlineDB.next({
        userId,
        email: data.user.email,
        first_name: firstName, // ‚úÖ –î–æ–±–∞–≤–µ–Ω–æ
        last_name: lastName,   // ‚úÖ –î–æ–±–∞–≤–µ–Ω–æ
        role: userRole
      });
  
      console.log("‚úÖ –£—Å–ø–µ—à–µ–Ω –≤—Ö–æ–¥, –∑–∞–ø–∏—Å–∞–Ω –≤ localStorage:", { userId, email: data.user.email, first_name: firstName, last_name: lastName, role: userRole });
      this.showMessage("‚úÖ Login successfully!");
  
      return {
        userId,
        email: data.user.email,
        first_name: firstName, // ‚úÖ –î–æ–±–∞–≤–µ–Ω–æ
        last_name: lastName,   // ‚úÖ –î–æ–±–∞–≤–µ–Ω–æ
        role: userRole
      };
    } catch (err) {
      console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ –Ω–∞ login:", err);
      return null;
    }
  }

  // async login(email: string, password: string): Promise<any> {
  //   try {
  //     const { data, error } = await this.supabase.auth.signInWithPassword({ email, password });
  
  //     console.log("üõ†Ô∏è Supabase login response:", data, error); // üîπ –î–æ–±–∞–≤—è–º–µ –ª–æ–≥–≤–∞–Ω–µ

  //     if (error || !data.session) {
  //       console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥:", error?.message || "–ù—è–º–∞ —Å–µ—Å–∏—è!");
  //       this.showMessage("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥!");
  //       return null;
  //     }
  
  //     // console.log("‚úÖ –£—Å–ø–µ—à–µ–Ω –≤—Ö–æ–¥, –¥–∞–Ω–Ω–∏ –æ—Ç Supabase:", data); // üîç Debug
  
  //     const userId = data.user?.id;
  //     const token = data.session.access_token;
  
  //     if (!userId) {
  //       console.error("‚ö†Ô∏è –õ–∏–ø—Å–≤–∞ userId! –í—ä–∑–º–æ–∂–Ω–æ –µ –≥—Ä–µ—à–∫–∞ –≤ Supabase.");
  //       return null;
  //     }
  
  //     // üîπ –í–∑–∏–º–∞–º–µ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è (–Ω–∞–ø—Ä. —Ä–æ–ª—è)
  //     const { data: userData, error: userError } = await this.supabase
  //       .from("users") // üõë –ò–º–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ –≤ Supabase
  //       .select("role")
  //       .eq("id", userId)
  //       .single();
  
  //     if (userError) {
  //       console.error("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∑–µ–º–∞–Ω–µ –Ω–∞ —Ä–æ–ª—è:", userError.message);
  //     }
  
  //     const userRole = userData?.role || "user"; // üëà –ê–∫–æ –Ω—è–º–∞ —Ä–æ–ª—è, –ø—Ä–∏–µ–º–∞–º–µ "user"
  
  //     // üîπ –ó–∞–ø–∞–∑–≤–∞–º–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏—Ç–µ –¥–∞–Ω–Ω–∏
  //     localStorage.setItem("token", token);
  //     localStorage.setItem(
  //       "loggedUser",
  //       JSON.stringify({
  //         userId,
  //         email: data.user.email,
  //         role: userRole,
  //       })
  //     );
  
  //     this.userLoggedInOnlineDB.next({
  //       userId,
  //       email: data.user.email,
  //       role: userRole
  //     });
  //     console.log("‚úÖ –£—Å–ø–µ—à–µ–Ω –≤—Ö–æ–¥, –∑–∞–ø–∏—Å–∞–Ω –≤ localStorage:", { userId, email: data.user.email, role: userRole });
  //     this.showMessage("‚úÖ –£—Å–ø–µ—à–µ–Ω –≤—Ö–æ–¥!");
      
  //     return {
  //       userId,
  //       email: data.user.email,
  //       role: userRole
  //     };
  //   } catch (err) {
  //     console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ –Ω–∞ login:", err);
  //     return null;
  //   }
  // }

  checkSessionOnlineDB(): void {
    // const userData = localStorage.getItem("loggedUserOnlineDB"); // üîπ –ü—Ä–æ–º–µ–Ω—è–º–µ –∫–ª—é—á–∞ –≤ localStorage
    const userData = localStorage.getItem("loggedUser"); // üîπ –ü—Ä–æ–º–µ–Ω—è–º–µ –∫–ª—é—á–∞ –≤ localStorage
    if (userData) {
      this.userLoggedInOnlineDB.next(JSON.parse(userData));
    } else {
      this.userLoggedInOnlineDB.next(null);
    }
  }

  getUserInfo(): any {
    // const userData = localStorage.getItem("loggedUserOnlineDB");
    const userData = localStorage.getItem("loggedUser");
    return userData ? JSON.parse(userData) : null;
  }

  getToken(): string | null {
    return localStorage.getItem('token'); // üî• –í–∑–∏–º–∞ —Ç–æ–∫–µ–Ω–∞ –æ—Ç –ª–æ–∫–∞–ª–Ω–æ—Ç–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  }

  getRole(): string | null {
    return localStorage.getItem('role'); // üî• –í–∑–∏–º–∞ —Ä–æ–ª—è—Ç–∞ –æ—Ç –ª–æ–∫–∞–ª–Ω–æ—Ç–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  }
  
  // ‚úîÔ∏è –õ–æ–≥–∞—É—Ç —Ñ—É–Ω–∫—Ü–∏—è
  async logout() {
    await this.supabase.auth.signOut();

    console.log('üö™ –ò–∑–ª–∏–∑–∞–Ω–µ...');
    this.showMessage('üö™ Logout successfully...');
    localStorage.removeItem('token');
    localStorage.removeItem('loggedUser');
    this.userLoggedInOnlineDB.next(null);

    this.router.navigate(['/']);
  }
}