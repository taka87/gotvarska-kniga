import { Component, OnInit } from '@angular/core';
import { AdminService } from '../../../mysql-services/admin-service.service';
import { CommonModule } from '@angular/common';
import { RouterLink } from '@angular/router';
import { FormsModule } from '@angular/forms';
//import { RegisterFormComponentMySqlComponent } from '../../register-form-component-my-sql/register-form-component-my-sql.component';
import { AuthServiceOnlineDB } from '../../online-DB-services/auth-service-online-db.service';
import { MatSnackBar } from '@angular/material/snack-bar';
import { UserPanelServiceOnlineDB } from '../../online-DB-services/user-panel-online-db.service';

@Component({
  selector: 'app-user-panel-onlinedb',
  imports: [CommonModule,RouterLink, FormsModule],
  templateUrl: './user-panel-onlinedb.component.html',
  styleUrl: './user-panel-onlinedb.component.css'
})
export class UserPanelOnlineDBComponent {
  title = "Immerse yourself in the magic of our culinary world";
  recipes: any[] = [];
  selectedRecipe: any = null;
  userName: string = '';

  //edit recipe
  showEditForm: boolean = false;

  constructor(
    private userPanelOnlineDbService: UserPanelServiceOnlineDB,
    private authServiceOnlineDB: AuthServiceOnlineDB,
    private snackBar:MatSnackBar
  ) {}

  showMessage(message: string) {
    this.snackBar.open(message, '–ó–∞—Ç–≤–æ—Ä–∏', {
      duration: 3000, // 3 —Å–µ–∫—É–Ω–¥–∏
      horizontalPosition: 'center',
      verticalPosition: 'top'
    });
  }
 
  ngOnInit(): void { 
     // this.checkAdmin();
     this.loadRecipes();
 
     const user = this.authServiceOnlineDB.getUserInfo();
     this.userName = user.first_name || 'Guest';
   }
 
   loadRecipes() {
    const user = this.authServiceOnlineDB.getUserInfo();
    
    if (!user || !user.userId) {
      console.error("‚ùå –ù—è–º–∞ –ª–æ–≥–Ω–∞—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª!");
      return;
    }
  
    this.userPanelOnlineDbService.getUserRecipes(user.userId).subscribe(
      (data) => {
        this.recipes = data.map(recipe => ({
          ...recipe,
          userId: recipe.user?.id || user.userId // –ê–∫–æ –Ω—è–º–∞ user, –∑–∞–¥–∞–≤–∞–º–µ –ª–æ–≥–Ω–∞—Ç–∏—è
        }));
        // console.log("‚úÖ –ó–∞—Ä–µ–¥–µ–Ω–∏ —Ä–µ—Ü–µ–ø—Ç–∏:", this.recipes);
      },
      (error) => {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç–∏:", error);
      }
    );
  }
 
   //2
   deleteRecipe(recipeId: string) {
     this.userPanelOnlineDbService.deleteUserRecipe(recipeId).subscribe(
       () => {
         this.recipes = this.recipes.filter(r => r.id !== recipeId);
       },
       (error) => {
         console.error("Error deleting recipe:", error);
       }
     );
   }
 
   //‚úÖ –ú–µ—Ç–æ–¥ –∑–∞ –æ—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞ —Ä–µ–¥–∞–∫—Ü–∏—è:
   editRecipe(recipe: any) {
    // console.log("Editing recipe:", recipe);
  
    if (!recipe || !recipe.id) {
      console.error("‚ùå Error: Recipe has no ID!");
      return;
    }
  
    const userId = recipe.user_id || recipe.userId; // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–∞–º–µ, —á–µ user ID-—Ç–æ —Å–µ –≤–∑–µ–º–∞ –ø—Ä–∞–≤–∏–ª–Ω–æ
  
    if (!userId) {
      console.error("‚ùå Error: Recipe has no associated user ID!");
      return;
    }
  
    this.selectedRecipe = { 
      ...recipe, 
      userId: userId // –ó–∞–ø–∞–∑–≤–∞–º–µ user ID —Å –ø—Ä–∞–≤–∏–ª–Ω–æ—Ç–æ –∏–º–µ
    };
  
    // console.log("‚úÖ Recipe selected for editing:", this.selectedRecipe);
    this.showEditForm = true;
  }
   
   //‚úÖ –ú–µ—Ç–æ–¥ –∑–∞ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç–∞—Ç–∞:
   updateRecipe() {
    if (!this.selectedRecipe || !this.selectedRecipe.id) {
      console.error("‚ùå Error: No recipe ID found!");
      return;
    }
  
    // console.log("üîÑ Updating recipe:", this.selectedRecipe);
  
    const updatedData = {
      recipe_name: this.selectedRecipe.recipe_name,
      description: this.selectedRecipe.description,
      ingredients: this.selectedRecipe.ingredients,
      user_id: this.selectedRecipe.userId // –í–∏–Ω–∞–≥–∏ –≤–∑–∏–º–∞–º–µ `user_id`
    };
  
    // console.log("üì§ Sending update data:", updatedData);
  
    this.userPanelOnlineDbService.editUserRecipe(this.selectedRecipe.id, updatedData).subscribe(
      () => {
        // console.log("‚úÖ Recipe updated successfully!");
        this.showMessage("‚úÖ Recipe updated successfully!");
        this.showEditForm = false;
        this.loadRecipes(); // –ü—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–º–µ —Å–ø–∏—Å—ä–∫–∞ —Å —Ä–µ—Ü–µ–ø—Ç–∏
      },
      (error) => {
        this.showMessage("‚ùå Error updating recipe:");
        // console.error("‚ùå Error updating recipe:", error);
      }
    );
  }
 
   cancelEdit() {
     this.showEditForm = false;
     this.selectedRecipe = null;
   }
}

