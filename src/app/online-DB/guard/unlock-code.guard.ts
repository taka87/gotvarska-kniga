import { CanActivateFn } from '@angular/router';
import Swal from 'sweetalert2';
import { inject } from '@angular/core';
import { Router } from '@angular/router';

export const unlockCodeGuard: CanActivateFn = async (route, state) => {
  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∫–æ–¥—ä—Ç –µ –∏–∑—Ç–µ–∫—ä–ª
  const unlockCodeTime = localStorage.getItem('unlockCodeTime');
  const currentTime = new Date().getTime();

   // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∫–æ–¥—ä—Ç –∑–∞ –¥–æ—Å—Ç—ä–ø —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  const router = inject(Router); // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ inject –∑–∞ –¥–∞ –≤–∑–µ–º–µ–º Router

  if (unlockCodeTime && (currentTime - parseInt(unlockCodeTime)) > 3600000) {
    // –ê–∫–æ –∫–æ–¥—ä—Ç –µ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω —Å–ª–µ–¥ 24 —á–∞—Å–∞, –ø—Ä–µ–º–∞—Ö–≤–∞–º–µ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –∏ –≤—Ä–µ–º–µ—Ç–æ
    localStorage.removeItem('unlockCode');
    localStorage.removeItem('unlockCodeTime');
  }

  // –ê–∫–æ –Ω—è–º–∞ –∫–ª—é—á –∑–∞ –æ—Ç–≤–æ—Ä–µ–Ω –¥–æ—Å—Ç—ä–ø, –ø–æ–∫–∞–∑–≤–∞–º–µ –º–æ–¥–∞–ª–∞
  const isUnlocked = localStorage.getItem('unlockCode') === 'open-sesame';

  if (!isUnlocked) {
    // –í—Ä—ä—â–∞–º–µ Promise –æ—Ç SweetAlert2
    const result = await Swal.fire({
      title: 'Please insert code',
      input: 'password',
      inputPlaceholder: 'Enter Your Code',
      showCancelButton: true,
      confirmButtonText: 'OK',
      cancelButtonText: 'Cancel'
    });

    if (result.isConfirmed) {
      const enteredCode = result.value;
      if (enteredCode === 'sesame') { // üîπ –ó–∞–º–µ–Ω–∏ —Å —Ç–≤–æ–π –∫–æ–¥
        localStorage.setItem('unlockCode', 'open-sesame'); // –ó–∞–ø–∏—Å–≤–∞–º–µ, —á–µ –¥–æ—Å—Ç—ä–ø—ä—Ç –µ –æ—Ç–≤–æ—Ä–µ–Ω
        localStorage.setItem('unlockCodeTime', new Date().getTime().toString()); // –ó–∞–ø–∏—Å–≤–∞–º–µ –≤—Ä–µ–º–µ—Ç–æ –Ω–∞ –≤—ä–≤–µ–∂–¥–∞–Ω–µ
        return true; // –ü–æ–∑–≤–æ–ª—è–≤–∞–º–µ –¥–æ—Å—Ç—ä–ø
      } else {
        Swal.fire('Code Incorrect', 'Try again!', 'error');
        return false; // –ù–µ –ø–æ–∑–≤–æ–ª—è–≤–∞–º–µ –¥–æ—Å—Ç—ä–ø
      }
    } else {
      router.navigate(['/']);
      return false; // –ê–∫–æ –Ω–µ –µ –ø–æ—Ç–≤—ä—Ä–¥–µ–Ω–æ –∏–ª–∏ –µ –Ω–∞—Ç–∏—Å–Ω–∞—Ç "–û—Ç–∫–∞–∑"
    }
  } else {
    return true; // –ê–∫–æ –¥–æ—Å—Ç—ä–ø—ä—Ç –≤–µ—á–µ –µ —Ä–∞–∑—Ä–µ—à–µ–Ω
  }
};