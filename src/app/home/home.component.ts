import { Component,OnInit,CUSTOM_ELEMENTS_SCHEMA  } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { FormBuilder,FormGroup,Validators } from '@angular/forms';
import { UserControlComponent } from "../user-control/user-control.component";
import { DailyMenuComponent } from './daily-menu/daily-menu.component';
import { LoggedButtonComponent } from '../logged-button/logged-button.component';
import { UserSessionService } from '../services/user-session.service';
import { UserMysqlComponent } from '../mysql/user-mysql/user-mysql.component';
import { UserControlMysqlComponent } from '../mysql/user-control-mysql/user-control-mysql.component';
import { LoggedButtonMysqlComponent } from '../mysql/logged-button-mysql/logged-button-mysql.component';
import { AuthService } from '../mysql-services/auth-service.service';
// import { MapComponent } from "../google-map/map/map.component";
// import { bootstrapApplication } from '@angular/platform-browser';
// import { provideAnimations } from '@angular/platform-browser/animations';
// import { register } from 'swiper/element/bundle';
import Swiper from 'swiper';
import { Navigation, Pagination, Autoplay } from 'swiper/modules';
import { UserRegisterOnlineDB } from '../online-DB/user-register-online-DB/user-register-online-db.component';
// import { LoggedButtonOnlineDBComponent } from '../online-DB/logged-button-online-DB/logged-button-online-db.component';
import { LoggedButtonOnlinedbComponent } from '../online-DB/logged-button-onlinedb/logged-button-onlinedb.component';
import { UserControlOnlineDBComponent } from '../online-DB/user-control-online-DB/user-control-online-db.component';
import { AuthServiceOnlineDB } from '../online-DB/online-DB-services/auth-service-online-db.service';

@Component({
  selector: 'app-home',
  standalone: true,
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css'],
  imports: [
    CommonModule, 
    RouterModule,
    DailyMenuComponent, 
    UserControlComponent, 
    LoggedButtonComponent,
    UserControlMysqlComponent, 
    LoggedButtonMysqlComponent,
    UserControlOnlineDBComponent,
    LoggedButtonOnlinedbComponent
  ],
  schemas: [CUSTOM_ELEMENTS_SCHEMA], // –î–æ–±–∞–≤–∏ —Ç–æ–∑–∏ —Ä–µ–¥

  //imports: [UserControlComponent, LoggedButtonComponent, LoggedButtonMysqlqlComponent,  UserMysqlComponent, MapComponent]
})
export class HomeComponent {
  title = "Immerse yourself in the magic of our culinary world";
  showRegisterFormMysql = false;
  showRegisterFormOnlineDB = false;
  swiper: Swiper | null = null;

  //LocalDB
  isLogged = false;  
  userName = 'user'; 

  //MYSQl
  isLoggedMySQL = false;  
  userNameMySQL: string | null = null;  
  isMenuOpen = false; // –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–∞ –≤–∏–¥–∏–º–æ—Å—Ç—Ç–∞ –Ω–∞ –º–µ–Ω—é—Ç–æ

  
  //OnlineDB
  isLoggedOnlineDB = false;  
  userNameOnlineDB: string | null = null;  
  isMenuOpenOnlineDB = false; // –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–∞ –≤–∏–¥–∏–º–æ—Å—Ç—Ç–∞ –Ω–∞ –º–µ–Ω—é—Ç–æ

  showFavorites = false;
  showCategories = true;

  //swiper
  swiperKey = 0;
  images = [
    'assets/images/swiper/image1.jpg',
    'assets/images/swiper/maindish.jpg',
    'assets/images/swiper/salad.jpg'
  ];
  
  constructor(
    private userSession: UserSessionService, 
    private authService: AuthService,
    private authServiceOnlineDB: AuthServiceOnlineDB
  ) {}

  ngOnChanges() {
    this.swiperKey++;
  }
  
  // new
  getCategoryRoute(categoryName: string): string {
    switch (categoryName) {
      case 'Soups': return '/soups';
      case 'Main Dishes': return '/main-dishes';
      case 'Salads': return '/salads';
      case 'Desserts': return '/desserts';

      default: return '/';
    }
  }

  categories = [
    { id: 1, name: 'Soups', image: 'assets/Soups/pustra_zelenchukova_supa.jpg' },  //–∞–∫–æ —Å–º–µ–Ω–∏—à "—Å—É–ø–∏"-> —Å–µ —á—É–ø–∏ –ø—ä—Ç—è ??
    { id: 2, name: 'Main Dishes', image: 'assets/Maindishes/maindish.jpg' },
    { id: 4, name: 'Salads', image: 'assets/Salads/salad.jpg' },
    { id: 3, name: 'Desserts', image: 'assets/Desserts/dessert.jpg' },

  ];

  // toggleCategories() {
  //   this.showCategories = !this.showCategories;
  // }

  favoriteRecipes = [
    { name: '–¢–æ—Ä—Ç–∞ –ì–∞—Ä–∞—à', description: '–ö–ª–∞—Å–∏—á–µ—Å–∫–∞ —à–æ–∫–æ–ª–∞–¥–æ–≤–∞ —Ç–æ—Ä—Ç–∞ —Å –±–æ–≥–∞—Ç –≤–∫—É—Å.' },
    { name: '–ú—É—Å–∞–∫–∞', description: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ –±—ä–ª–≥–∞—Ä—Å–∫–æ —è—Å—Ç–∏–µ —Å –∫–∞—Ä—Ç–æ—Ñ–∏ –∏ –∫–∞–π–º–∞.' },
    { name: '–®–∫–µ–º–±–µ —á–æ—Ä–±–∞', description: '–°—É–ø–∞ —Å —à–∫–µ–º–±–µ, –ø–æ–¥—Ö–æ–¥—è—â–∞ –∑–∞ –º–∞—Ö–º—É—Ä–ª—É–∫.' },
  ];

  toggleFavorites() {
    this.showFavorites = !this.showFavorites;
  }

  toggleMySqlRegistrationForm() {
    this.showRegisterFormMysql = !this.showRegisterFormMysql;
  }

  //ONLINE DB
  toggleOnlineDBRegistrationForm() {
    this.showRegisterFormOnlineDB = !this.showRegisterFormOnlineDB;
  }

  // —Å–µ–∫—Ü–∏—è –∑–∞ –ª–æ–≥–∏–Ω/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è MYSQL
  ngOnInit(): void {
    this.checkLoginStatus();
    this.checkLoginStatusOnlineDB();

    // –°–ª–µ–¥–∏–º –≤ —Ä–µ–∞–ª–Ω–æ –≤—Ä–µ–º–µ, –∞–∫–æ AuthService –∑–∞—Å–µ—á–µ –ø—Ä–æ–º—è–Ω–∞
    this.authService.userLoggedIn$.subscribe(() => {
      this.checkLoginStatus();
    });

    // –°–ª–µ–¥–∏–º –≤ —Ä–µ–∞–ª–Ω–æ –≤—Ä–µ–º–µ, –∞–∫–æ AuthService –∑–∞—Å–µ—á–µ –ø—Ä–æ–º—è–Ω–∞ ONLINEDB
    this.authServiceOnlineDB.userLoggedIn$.subscribe(() => {
      this.checkLoginStatusOnlineDB();
    });

    //JSON Server
    this.isLogged = this.userSession.isLoggedIn(); // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –ª–æ–≥–Ω–∞—Ç

    if (this.isLogged) {
      const userData = JSON.parse(localStorage.getItem('loggedUserJSON') || '{}');
      this.userName = userData.firstName || '–ì–æ—Å—Ç';
    }

    if (this.isLogged) {
      this.isMenuOpen = false;
    }

    this.userSession.currentUser$.subscribe(userData => {
      this.isLogged = userData !== null;
      if (this.isLogged) {
        const user = JSON.parse(userData || '{}');
        this.userName = user.firstName || '–ì–æ—Å—Ç';
      }
    });
  

    this.swiper = new Swiper('.swiper', {
      modules: [Navigation, Pagination, Autoplay],
      navigation: true,
      pagination: { clickable: true },
      autoplay: { delay: 3000 },
    });
  }

  //MYSQL
  checkLoginStatus(): void {
    const token = localStorage.getItem('token');
    const userData = localStorage.getItem('loggedUserMYSQL');

    if (token && userData) {
      this.isLoggedMySQL = true;
      try {
        const parsedUser = JSON.parse(userData);
        this.userNameMySQL = parsedUser.firstName || "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª";
      } catch (error) {
        console.error("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏—Ç–µ –¥–∞–Ω–Ω–∏!", error);
      }
    } else {
      this.isLoggedMySQL = false;
      this.userNameMySQL = null;
    }
  }

  //ONLINEDB
  checkLoginStatusOnlineDB(): void {
    const userData = localStorage.getItem("loggedUser"); // üîÑ –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –ø—Ä–∞–≤–∏–ª–Ω–∏—è –∫–ª—é—á
  
    if (userData) {
      try {
        const parsedUser = JSON.parse(userData);
        this.isLoggedOnlineDB = true;
        this.userNameOnlineDB = parsedUser.email; // üëà –ò–ª–∏ `parsedUser.firstName`
        // console.log("‚úÖ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –ª–æ–≥–Ω–∞—Ç:", parsedUser);
      } catch (error) {
        console.error("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏—Ç–µ –¥–∞–Ω–Ω–∏!", error);
      }
    } else {
      this.isLoggedOnlineDB = false;
      this.userNameOnlineDB = null;
      // console.log("‚ùå –ù—è–º–∞ –ª–æ–≥–Ω–∞—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª (OnlineDB)");
    }
  }

  logOut(): void {
    localStorage.removeItem('token');  
    localStorage.removeItem('loggedUserMYSQL'); 
    this.isLoggedMySQL = false;
    this.userNameMySQL = null;
    if (typeof window !== 'undefined') {
      // –ö–æ–¥—ä—Ç —Ç—É–∫ —â–µ —Å–µ –∏–∑–ø—ä–ª–Ω—è–≤–∞ —Å–∞–º–æ –≤ –±—Ä–∞—É–∑—ä—Ä–∞
    window.location.reload();
      console.log(window.location.href);
    }
  }

  logOutOnlineDB(): void {
    localStorage.removeItem('token');  
    localStorage.removeItem('loggedUser'); 
    this.isLoggedOnlineDB = false;
    this.userNameOnlineDB = null;
    if (typeof window !== 'undefined') {
      // –ö–æ–¥—ä—Ç —Ç—É–∫ —â–µ —Å–µ –∏–∑–ø—ä–ª–Ω—è–≤–∞ —Å–∞–º–æ –≤ –±—Ä–∞—É–∑—ä—Ä–∞
    window.location.reload();
      console.log(window.location.href);
    }
  }

  toggleMenu() {
    this.isMenuOpen = !this.isMenuOpen;
  }  
  toggleMenuOnlineDB() {
    this.isMenuOpenOnlineDB = !this.isMenuOpenOnlineDB;
  }

    // SWIPER - slide
  ngAfterViewInit() {
    new Swiper('.swiper', {
      modules: [Navigation, Pagination, Autoplay],
      loop: true, // –ó–∞ –±–µ–∑–∫—Ä–∞–π–Ω–æ –≤—ä—Ä—Ç–µ–Ω–µ
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev'
      },
      pagination: {
        el: '.swiper-pagination',
        clickable: true
      },
      autoplay: {
        delay: 3000, // –í—ä—Ä—Ç–∏ —Å–Ω–∏–º–∫–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞ –≤—Å–µ–∫–∏ 3 —Å–µ–∫
        disableOnInteraction: false
      }
    });
  }  
}